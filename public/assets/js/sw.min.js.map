{"version":3,"sources":["sw.js"],"names":["stashInCache","cacheName","request","response","caches","open","then","cache","put","offlinePages","Request","map","url","credentials","staticCacheName","addAll","trimCache","maxItems","keys","clearOldCaches","Promise","all","filter","key","indexOf","version","delete","pagesCacheName","self","addEventListener","event","updateStaticCache","skipWaiting","waitUntil","clients","claim","imagesCacheName","URL","method","copy","clone","includes","pathname","catch","headers","match","fetch","get","Response","respondWith"],"mappings":"cAAA,WAegC,QAA5BA,GAAAC,EAAAC,EAAAC,GACDC,OAAAC,KAAAJ,GAAAK,KAAA,SAAAC,GAAA,MAAAA,GAAAC,IAAAN,EAAAC,KAGCC,QAAOC,KAIN,MAHCD,QAAAC,KAAOE,GAAaE,KAAAA,SAAAA,GAAiB,MAAAF,GAASG,OAAJD,EAAgBE,IAAA,SAAAC,GAAA,MAAA,IAAAF,SAAAE,GACxDC,YAAAA,qBAFJT,OAAAC,KAAAS,GAAAR,KAAA,SAAAC,GAKA,MAAOH,GAAOC,OAAKS,aAAZH,IAA6BL,SAAAA,GAAAA,MAAK,IAAAI,SAAAE,GACvCC,YAAaE,qBAGd,QAJDC,GAAAf,EAAAgB,GAKDb,OAAAC,KAAAJ,GAAAK,KAAA,SAAAC,GAIGA,EAAMW,OAAOZ,KAAK,SAAAY,GAFbF,EAAAA,OAAUf,GACjBG,EAAYH,OAAAA,EAAWK,IAAKA,KAAAU,EAAAf,EAAOgB,QAMlC,QANDE,KAOD,MAAAf,QAAAc,OAAAZ,KAAA,SAAAY,GAIG,MAAOE,SAAQC,IAAIH,EAAKI,OAAO,SAAAC,GAAA,MAA8B,KAAzBA,EAAIC,QAAQC,KAAgBd,IAAI,SAAAY,GAAA,MAAKnB,QAAOsB,OAAOH,QA3C5F,GAAAE,GAAW,UACVX,EAAAW,EAAA,SAGME,EAAiBF,EAAU,QAF3BA,EAANA,EAAA,SACMX,GACN,WACA,aACA,WAIE,UAIF,IA6BmCc,MAAAC,iBAASL,UAAJ,SAAAM,GAALA,EAAiCnB,UAAIoB,IAAAzB,KAAA,WAAA,MAAAsB,MAAAI,mBACrEJ,KAFDC,iBAAA,WAAA,SAAAC,GAGDA,EAAAG,UAAAd,IAAAb,KAAA,WAAA,MAAAsB,MAAAM,QAAAC,aAGCL,KAAAA,iBAAgBC,UAAAA,SAAAA,GAAyB,eAAAD,EAAIF,KAAKI,UAAlDhB,EAAAW,EAAA,IADFX,EAAAoB,EAAA,OAK0CR,KAAAC,iBAASK,QAAT,SAAAJ,GAAA,GAAtC5B,GAAA4B,EAAA5B,QADJU,EAAA,GAAAyB,KAAAnC,EAAAU,IAIAgB,IAAKC,EAAAA,IAAAA,QAAiB,uBAAkB,GAIrC,QAAA3B,EAAAoC,OAID,MAAIpC,GAAAA,QAAgBA,IAAAA,UAApBsB,QAAA,gBAAA,MACAM,GAAIlB,YAAcV,MAAQU,GAA1BN,KAAA,SAAAH,GAYI,GAAIoC,GAAOpC,EAASqC,OAJvB,OALC/B,GAAAgC,SAAA7B,EAAA8B,WAAAjC,EAAAgC,SAAA7B,EAAA8B,SAAA,KACD1C,EAAAc,EAAAZ,EAAAqC,GAEGrC,EAAAyB,EAA0BzB,EAAAqC,GAE7BpC,IAYIwC,MAAM,WAVPzC,MAAAA,QAAQ0C,MAAY1C,GAApBI,KAA8BkB,SAAAA,GAAAA,MAAQrB,IAAkBC,OAAGyC,MAAA,0BAKvD7C,GAAAA,YAAAA,OAAac,MAAAA,GAAiBZ,KAASqC,SAAAA,GAC1C,MAFDpC,IAEO2C,MAAA5C,GAAAI,KAAA,SAAAH,GACHH,GAAAA,EAAAA,QAAa2B,IAAAA,UAAgBzB,QAASqC,YAAtC,EAAA,CACH,GAAAA,GAAApC,EAAAqC,OAEAG,GAAMP,EAAIlC,EAAAqC,GACuB,MAAApC,KAVpCwC,MAAA,WAaA,GAAAzC,EAAA0C,QAAAG,IAAA,UAAAvB,QAAA,YAAA,EACD,MAAA,IAAAwB,UAAA,wYACKC,SACG9C,eAAY2C","file":"sw.min.js","sourcesContent":["(function() {\n  'use strict';\n  const version = 'cb1.0::';\n  const staticCacheName = version + 'static';\n  const pagesCacheName = version + 'pages';\n  const imagesCacheName = version + 'images';\n  const offlinePages = [\n    '/offline',\n    '/creating/',\n    '/writing',\n    '/eating',\n    '/'\n  ];\n\n  function stashInCache(cacheName, request, response) {\n    caches.open(cacheName).then(cache=>cache.put(request, response));\n  }\n\n  function updateStaticCache() {\n    caches.open(staticCacheName).then(cache=>{\n      return cache.addAll(offlinePages.map(url=>new Request(url,{\n        credentials: 'same-origin'\n      })));\n    });\n    return caches.open(staticCacheName).then(cache=>{\n      return cache.addAll(staticAssets.map(url=>new Request(url,{\n        credentials: 'same-origin'\n      })));\n    });\n  }\n\n  function trimCache(cacheName, maxItems) {\n    caches.open(cacheName).then(cache=>{\n      cache.keys().then(keys=>{\n        if (keys.length > maxItems) {\n          cache.delete(keys[0]).then(trimCache(cacheName, maxItems));\n        }\n      });\n    });\n  }\n\n  function clearOldCaches() {\n    return caches.keys().then(keys=>{\n      return Promise.all(keys.filter(key=>key.indexOf(version) !== 0).map(key=>caches.delete(key)));\n    });\n  }\n\n  self.addEventListener('install', event=>{\n    event.waitUntil(updateStaticCache().then(()=>self.skipWaiting()));\n  });\n\n  self.addEventListener('activate', event=>{\n      event.waitUntil(clearOldCaches().then(()=>self.clients.claim()));\n  });\n\n  self.addEventListener('message', event=>{\n    if (event.data.command === 'trimCaches') {\n      trimCache(pagesCacheName, 35);\n      trimCache(imagesCacheName, 20);\n    }\n  });\n\n  self.addEventListener('fetch', event=>{\n    let request = event.request;\n    let url = new URL(request.url);\n\n    if (request.url.indexOf('google-analytics') !== -1) {\n      return;\n    }\n\n    if (request.method !== 'GET') {\n      return;\n    }\n\n    if (request.headers.get('Accept').indexOf('text/html') !== -1) {\n      event.respondWith(fetch(request).then(response=>{\n        let copy = response.clone();\n\n        if (offlinePages.includes(url.pathname) || offlinePages.includes(url.pathname + '/')) {\n            stashInCache(staticCacheName, request, copy);\n        } else {\n            stashInCache(pagesCacheName, request, copy);\n        }\n        return response;\n      }).catch(()=>{\n        return caches.match(request).then(response=>response || caches.match('/offline.html'));\n      }\n      ));\n      return;\n    }\n    event.respondWith(caches.match(request).then(response=>{\n      return response || fetch(request).then(response=>{\n        if (request.headers.get('Accept').indexOf('image') !== -1) {\n          let copy = response.clone();\n\n          stashInCache(imagesCacheName, request, copy);\n        }\n        return response;\n      }\n      ).catch(()=>{\n        if (request.headers.get('Accept').indexOf('image') !== -1) {\n          return new Response('<svg role=\"img\" aria-labelledby=\"offline-title\" viewBox=\"0 0 400 300\" xmlns=\"http://www.w3.org/2000/svg\"><title id=\"offline-title\">Offline</title><g fill=\"none\" fill-rule=\"evenodd\"><path fill=\"#D8D8D8\" d=\"M0 0h400v300H0z\"/><text fill=\"#9B9B9B\" font-family=\"Helvetica Neue,Arial,Helvetica,sans-serif\" font-size=\"72\" font-weight=\"bold\"><tspan x=\"93\" y=\"172\">offline</tspan></text></g></svg>',{\n            headers: {\n              'Content-Type': 'image/svg+xml'\n            }\n          });\n        }\n      });\n    }));\n  });\n})();\n"]}