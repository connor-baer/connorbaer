{"version":3,"sources":["sw.js"],"names":["caches","open","cacheName","request","response","cache","put","updateStaticCache","then","staticCacheName","map","url","Request","credentials","addAll","staticAssets","trimCache","maxItems","keys","length","delete","clearOldCaches","Promise","all","filter","key","indexOf","version","pagesCacheName","self","addEventListener","event","waitUntil","skipWaiting","clients","claim","headers","get","fetch","offlinePages","includes","pathname","copy","stashInCache","catch","match","respondWith","clone","imagesCacheName","Response","Content-Type"],"mappings":"cAAA,WAaIA,QAAOC,GAAKC,EAAgBC,EAAAC,GAAAJ,OAAAC,KAAOI,GAAUF,KAASC,SAAAA,GAAAA,MAAAA,GAA1BE,IAAAH,EAAAC,KAG9B,QAASG,KAEqD,MAF9DP,QAASO,KAAAA,GAAoBC,KAAA,SAAAH,GAC3BL,MAAOC,GAAKQ,OAAAA,EAAsBC,IAAA,SAAAC,GAAA,MAAA,IAAAC,SAAOD,GACvCE,YAAaC,qBAAwBd,OAAAC,KAAAQ,GAAAD,KAAA,SAAAH,GAAA,MAArCA,GAAAS,OAAAC,aAAAL,IAAA,SAAAC,GAAA,MAAA,IAAAC,SAAAD,GADFE,YAAA,qBAM4D,QAArBG,GAAAd,EAAAe,GAAAjB,OAArCC,KAAAC,GAAAM,KAAA,SAAAH,GADFA,EAAAa,OAAAV,KAAA,SAAAU,GAKDA,EAAAC,OAAAF,GAMOZ,EAAMe,OAAOF,EAAK,IAAIV,KAAKQ,EAAUd,EAAWe,QACjD,QAAAI,KACF,MAJDrB,QAAAkB,OAAAV,KAAA,SAAAU,GADF,MAAAI,SAAAC,IAAAL,EAAAM,OAAA,SAAAC,GAAA,MAAA,KAAAA,EAAAC,QAAAC,KAAAjB,IAAA,SAAAe,GAAA,MAAAzB,QAAAoB,OAAAK,QA9BH,GAAAE,GAAW,UACVlB,EAAAkB,EAAA,SAGMC,EAAiBD,EAAU,QAF3BA,EAANA,EAAA,SACMlB,GACN,cACA,WACA,IAkCEoB,MAAAC,iBAAO,UAAmB,SAAAC,GACxBA,EAAAC,UAAOV,IAAwBd,KAAA,WAAA,MAAAqB,MAAAI,mBAAqCJ,KAAAC,iBAAYV,WAAZ,SAAAW,GAAAA,EAApEC,UAAAX,IAAAb,KAAA,WAAA,MAAAqB,MAAAK,QAAAC,aAYJN,KAAKC,iBAAiB,UAAW,SAAAC,GARX,eAAjBD,EAAAA,KAAAA,UACHC,EAAMC,EAAUzB,IAAyBS,EAAIa,EAAJ,OAG3CA,KAAKC,iBAAiB,QAAA,SAAAC,GAClBA,GAAAA,GAAMC,EAAUX,QAAsBV,EAAIkB,GAAKK,KAAAA,EAAQC,IAD3D,IAAAhC,EAAAQ,IAAAe,QAAA,uBAAA,GAMcE,QAAVZ,EAAUY,OAiBZ,MAAIzB,GAAQiC,QAAQC,IAAI,UAAUX,QAAQ,gBAAiB,MAZ7DG,GAAKC,YAAiBQ,MAAAnC,GAASK,KAAA,SAAAJ,GACzBD,GAAAA,GAAU4B,EAAM5B,OAOhBA,OAQIoC,GAAaC,SAAS7B,EAAI8B,WAAaF,EAAaC,SAAS7B,EAAI8B,SAAW,KAZhFtC,EAAYuB,EAAQvB,EAApBuC,GAEHC,EAAAf,EAAAzB,EAAAuC,GAEGvC,IACFyC,MAAA,WACD,MAAA5C,QAAA6C,MAAA1C,GAAAK,KAAA,SAAAJ,GAAA,MAAAA,IAAAJ,OAAA6C,MAAA,0BAkBDd,GAAMe,YAAY9C,OAAO6C,MAAM1C,GAASK,KAAK,SAAAJ,GAZzC,MAAImC,IAAaC,MAAAA,GAAaC,KAAAA,SAAAA,GAC1BE,GAAAA,EAAAA,QAAalC,IAAAA,UAAiBN,QAASuC,YAAvC,EAAA,CADJ,GAAAA,GAEOtC,EAAA2C,OAENJ,GAAAK,EAAA7C,EAAAuC,GAPe,MASTtC,KAC2BwC,MAAA,WAAA,GAAlCzC,EAAAiC,QAAAC,IAAA,UAAAX,QAAA,YAAA,EAVF,MAAA,IAAAuB,UAAA,wYAaAb,SACDc,eAAA","file":"sw.min.js","sourcesContent":["(function() {\n  'use strict';\n  const version = 'cb1.0::';\n  const staticCacheName = version + 'static';\n  const pagesCacheName = version + 'pages';\n  const imagesCacheName = version + 'images';\n  const offlinePages = [\n    '/blog/index',\n    '/offline',\n    '/'\n  ];\n\n  function stashInCache(cacheName, request, response) {\n    caches.open(cacheName).then(cache=>cache.put(request, response));\n  }\n\n  function updateStaticCache() {\n    caches.open(staticCacheName).then(cache=>{\n      return cache.addAll(offlinePages.map(url=>new Request(url,{\n        credentials: 'same-origin'\n      })));\n    });\n    return caches.open(staticCacheName).then(cache=>{\n      return cache.addAll(staticAssets.map(url=>new Request(url,{\n        credentials: 'same-origin'\n      })));\n    });\n  }\n\n  function trimCache(cacheName, maxItems) {\n    caches.open(cacheName).then(cache=>{\n      cache.keys().then(keys=>{\n        if (keys.length > maxItems) {\n          cache.delete(keys[0]).then(trimCache(cacheName, maxItems));\n        }\n      });\n    });\n  }\n\n  function clearOldCaches() {\n    return caches.keys().then(keys=>{\n      return Promise.all(keys.filter(key=>key.indexOf(version) !== 0).map(key=>caches.delete(key)));\n    });\n  }\n\n  self.addEventListener('install', event=>{\n    event.waitUntil(updateStaticCache().then(()=>self.skipWaiting()));\n  });\n\n  self.addEventListener('activate', event=>{\n      event.waitUntil(clearOldCaches().then(()=>self.clients.claim()));\n  });\n\n  self.addEventListener('message', event=>{\n    if (event.data.command === 'trimCaches') {\n      trimCache(pagesCacheName, 35);\n      trimCache(imagesCacheName, 20);\n    }\n  });\n\n  self.addEventListener('fetch', event=>{\n    let request = event.request;\n    let url = new URL(request.url);\n\n    if (request.url.indexOf('google-analytics') !== -1) {\n      return;\n    }\n\n    if (request.method !== 'GET') {\n      return;\n    }\n\n    if (request.headers.get('Accept').indexOf('text/html') !== -1) {\n      event.respondWith(fetch(request).then(response=>{\n        let copy = response.clone();\n\n        if (offlinePages.includes(url.pathname) || offlinePages.includes(url.pathname + '/')) {\n            stashInCache(staticCacheName, request, copy);\n        } else {\n            stashInCache(pagesCacheName, request, copy);\n        }\n        return response;\n      }).catch(()=>{\n        return caches.match(request).then(response=>response || caches.match('/offline.html'));\n      }\n      ));\n      return;\n    }\n    event.respondWith(caches.match(request).then(response=>{\n      return response || fetch(request).then(response=>{\n        if (request.headers.get('Accept').indexOf('image') !== -1) {\n          let copy = response.clone();\n\n          stashInCache(imagesCacheName, request, copy);\n        }\n        return response;\n      }\n      ).catch(()=>{\n        if (request.headers.get('Accept').indexOf('image') !== -1) {\n          return new Response('<svg role=\"img\" aria-labelledby=\"offline-title\" viewBox=\"0 0 400 300\" xmlns=\"http://www.w3.org/2000/svg\"><title id=\"offline-title\">Offline</title><g fill=\"none\" fill-rule=\"evenodd\"><path fill=\"#D8D8D8\" d=\"M0 0h400v300H0z\"/><text fill=\"#9B9B9B\" font-family=\"Helvetica Neue,Arial,Helvetica,sans-serif\" font-size=\"72\" font-weight=\"bold\"><tspan x=\"93\" y=\"172\">offline</tspan></text></g></svg>',{\n            headers: {\n              'Content-Type': 'image/svg+xml'\n            }\n          });\n        }\n      });\n    }));\n  });\n})();\n"]}